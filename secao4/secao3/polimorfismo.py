# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ

from abc import ABC, abstractmethod


class Notificacao(ABC):
    def __init__(self, mensagem):
        self.mensagem = mensagem

    @abstractmethod
    def enviar(self) -> bool: ...


class NotificacaoEmail(Notificacao):
    def enviar(self) -> bool:
        print('E-mail: enviando - ', self.mensagem)
        return True


class NotificacaoSMS(Notificacao):
    def enviar(self) -> bool:
        print('SMS: enviando - ', self.mensagem)
        return False


def notificar(notificacao: Notificacao): # Exemplo de polimorfismo - Independente da objeto inst√¢nciado, vai enviar notifica√ß√£o
    notificacao_enviada = notificacao.enviar() # Criando VAR que utiliza m√©todo abstrato da super class, com a notifica√ß√£o espec√≠fica

    if notificacao_enviada: # Notifica√ß√£oEmail
        print('Notifica√ß√£o enviada')
    else: #                   Notifica√ß√£oSMS
        print('Notifica√ß√£o N√ÉO enviada')


notificacao_email = NotificacaoEmail('testando e-mail')
notificar(notificacao_email) # Jogando meu objeto inst√¢nciado para dentro da fun√ß√£o que polimorfa minha determinada notifica√ß√£o

notificacao_sms = NotificacaoSMS('testando SMS')
notificar(notificacao_sms)