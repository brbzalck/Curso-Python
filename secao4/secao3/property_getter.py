# @property - um getter no modo Pyth√¥nico
# getter - um m√©todo para obter um atributo
# cor -> get_cor()
# modo pyth√¥nico - modo do Python de fazer coisas
# @property √© uma propriedade do objeto, ela
# √© um m√©todo que se comporta como um
# atributo ü§Ø ü§Ø ü§Ø
# Geralmente √© usada nas seguintes situa√ß√µes:
# - como getter
# - p/ evitar quebrar c√≥digo cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo
# C√≥digo cliente - √© o c√≥digo que usa seu c√≥digo
class Caneta:
    def __init__(self, cor): # Classe normal com m√©todo que recebe cor da caneta
        self.cor_tinta = cor 

    @property # Dentro do escopo da classe, @property se comporta como um m√©todo, mas no c√≥digo cliente como atributo(linha 32)
    def cor(self): # Usado ao meu ver para redefinir nome de atributo, sem quebrar o c√≥digo com o cliente
        print('PROPERTY')
        return self.cor_tinta # Em vez de self.cor, retorna self.cor_tinta
# pois self cor n√£o existe mais

    @property # M√©todo
    def cor_tampa(self):
        return 123456

###########################


caneta = Caneta('Azul')
print(caneta.cor) # Atributo
print(caneta.cor) # Atributo
print(caneta.cor) # Atributo
print(caneta.cor) # Atributo
print(caneta.cor) # Atributo
print(caneta.cor) # Atributo
print(caneta.cor_tampa) # Atributo

#####################################

# class Caneta:
#     def __init__(self, cor):
#         self.cor_tinta = cor

#     def get_cor(self):
#         print('GET COR')
#         return self.cor_tinta

# ###########################


# caneta = Caneta('Azul')
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())